from collections import deque

class Voter:
    def __init__(self, voter_id, name, age, address):
        self.voter_id = voter_id
        self.name = name
        self.age = age
        self.address = address

    def __str__(self):
        return f"ID: {self.voter_id}, Name: {self.name}, Age: {self.age}, Address: {self.address}"


class VoterManagementSystem:
    def __init__(self):
        self.voters = {}
        self.recent_actions = []   # Stack (LIFO) for actions
        self.registration_queue = deque()  # Queue (FIFO) for pending registrations

    # CREATE
    def register_voter(self, voter_id, name, age, address):
        if voter_id in self.voters:
            print(" Voter ID already exists!")
        elif age < 18:
            print(" Voter must be at least 18 years old!")
        else:
            self.voters[voter_id] = Voter(voter_id, name, age, address)
            self.recent_actions.append(("REGISTER", voter_id))
            print(" Voter registered successfully!")

    #================= Queue Operations =================

    def add_to_registration_queue(self, voter_id, name, age, address):
        self.registration_queue.append((voter_id, name, age, address))
        print("Voter added to registration queue.")

    def process_registration_queue(self):
        if self.registration_queue:
            voter_id, name, age, address = self.registration_queue.popleft()
            self.register_voter(voter_id, name, age, address)
        else:
            print("️ No voters in the registration queue.")

    # READ
    def search_voter(self, voter_id):
        return self.voters.get(voter_id, None)

    def display_all_voters(self):
        if not self.voters:
            print("️ No voters registered.")
        else:
            for voter in self.voters.values():
                print(voter)

    # UPDATE
    def update_voter(self, voter_id, name=None, age=None, address=None):
        if voter_id in self.voters:
            voter = self.voters[voter_id]
            if name:
                voter.name = name
            if age:
                if age < 18:
                    print(" Age must be 18 or above!")
                    return
                voter.age = age
            if address:
                voter.address = address
            self.recent_actions.append(("UPDATE", voter_id))
            print(" Voter details updated successfully!")
        else:
            print(" Voter not found!")

    # DELETE
    def delete_voter(self, voter_id):
        if voter_id in self.voters:
            del self.voters[voter_id]
            self.recent_actions.append(("DELETE", voter_id))
            print(" Voter deleted successfully!")
        else:
            print(" Voter not found!")

   #================= Stack operations =================
    def last_action(self):
        return self.recent_actions[-1] if self.recent_actions else None

    def undo_last_action(self):
        if self.recent_actions:
            action, voter_id = self.recent_actions.pop()
            if action == "REGISTER":
                if voter_id in self.voters:
                    del self.voters[voter_id]
                    print(f"️ Undo REGISTER: Voter {voter_id} removed.")
            elif action == "DELETE":
                print("️ Undo not supported for DELETE (data lost).")
            elif action == "UPDATE":
                print("️ Undo not implemented for UPDATE.")
        else:
            print("️ No actions to undo.")


# ================= MENU =================
if __name__ == "__main__":
    system = VoterManagementSystem()

    while True:
        print("\n===== Voter ID Management System =====")
        print("1. Register Voter")
        print("2. Search Voter")
        print("3. Update Voter")
        print("4. Delete Voter")
        print("5. Display All Voters")
        print("6. Add to Registration Queue")
        print("7. Process Registration Queue")
        print("8. Undo Last Action")
        print("9. Exit")

        choice = input("Enter your choice: ")

        if choice == "1":
            vid = int(input("Enter Voter ID: "))
            name = input("Enter Name: ")
            age = int(input("Enter Age: "))
            address = input("Enter Address: ")
            system.register_voter(vid, name, age, address)

        elif choice == "2":
            vid = int(input("Enter Voter ID: "))
            voter = system.search_voter(vid)
            print(voter if voter else "❌ Voter not found")

        elif choice == "3":
            vid = int(input("Enter Voter ID: "))
            name = input("Enter New Name (leave blank to skip): ") or None
            age_input = input("Enter New Age (leave blank to skip): ")
            age = int(age_input) if age_input else None
            address = input("Enter New Address (leave blank to skip): ") or None
            system.update_voter(vid, name, age, address)

        elif choice == "4":
            vid = int(input("Enter Voter ID: "))
            system.delete_voter(vid)

        elif choice == "5":
            system.display_all_voters()

        elif choice == "6":
            vid = int(input("Enter Voter ID: "))
            name = input("Enter Name: ")
            age = int(input("Enter Age: "))
            address = input("Enter Address: ")
            system.add_to_registration_queue(vid, name, age, address)

        elif choice == "7":
            system.process_registration_queue()

        elif choice == "8":
            system.undo_last_action()

        elif choice == "9":
            print(" Exiting... Goodbye!")
            break

        else:
            print("️ Invalid choice, please try again!")

